#### Understanding initialization settings - I ####
#
# Define boilerplate code
#
# Let's get started with creating our first strategy in quantstrat. In this
# exercise, you will need to fill in three dates:
#
# An initialization date for your backtest. The start of your data. The end of
# your data.
#
# The initialization date must always come before the start of the data,
# otherwise there will be serious errors in the output of your backtest.
#
# You should also specify what time zone and currency you will be working with
# with the functions Sys.setenv() and currency(), respectively. An example is
# here:
#
# Sys.setenv(TZ = "Europe/London") currency("EUR")
#
# For the rest of this course, you'll use UTC (Coordinated Universal Time) and
# USD (United States Dollars) for your portfolio settings.
#
#
# Use the library() command to load the quantstrat package. Set initdate as
# January 1, 1999, from as January 1, 2003, and to as December 31, 2015. Set a
# timezone of "UTC" using Sys.setenv(). Set a currency of "USD" using
# currency().
# Load the quantstrat package
library("quantstrat")
# Create initdate, from, and to strings
initdate <- "1999-01-01"
from <- "2003-01-01"
to <- "2015-12-31"
# Set the timezone to UTC
Sys.setenv(TZ = "UTC")
# Set the currency to USD
currency("USD")
#### Understanding initialization settings - II ####
#
# Like in the previous chapter, you will use getSymbols() to obtain the SPY data
# from Yahoo! Finance.
#
# After importing the data, use stock() to tell quantstrat what instruments will
# be present for the simulation, and to treat them just as they are, as opposed
# to creating a minimum buy size, as with futures. Furthermore, this command
# specifies which currency to use with the given instruments. Note that whenever
# you use a function to initialize a data set such as GDX or SPY, you must
# enclose it in quotation marks:
#
# stock("GDX", currency = "USD")
#
# The quanstrat package has been loaded into your workspace, as well as the from
# and to date strings that you created in the previous exercise.
# Use the library() command to load the quantmod package. Use getSymbols() to
# get adjusted data from SPY from Yahoo! Finance between the from and to dates.
# Use the stock() command to let quantstrat know you will be using the SPY data
# in your strategy and set its currency to "USD".
# Load the quantmod package
library("quantmod")
# Retrieve SPY from yahoo
getSymbols(Symbols = "SPY",
src = "yahoo",
index.class = "POSIXct",
from = from,
to = to,
adjust = TRUE,
auto.assign = TRUE)
# Use stock() to initialize SPY and set currency to USD
stock("SPY",
currency = "USD",
multiplier = 1)
# Define your trade size and initial equity
tradesize <- 100000
initeq <- 100000
# Define the names of your strategy, portfolio and account
strategy.st <- portfolio.st <- account.st <- "firststrat"
# limpa as va do quantstrat.
#rm.strat(portfolio.st)
#rm.strat(account.st)
# Remove the existing strategy if it exists
rm.strat(strategy.st)
# by HH: remove antes de criar de novo. Se não mudar para
rm.strat(portfolio.st) # para evitar o erro: "Portfolio firststrat already exists, use updatePortf() or addPortfInstr() to update it."
rm.strat(account.st) # para evitar o erro: "Account firststrat already exists, use updateAcct() or create a new account."
# Initialize the portfolio
initPortf(portfolio.st, symbols = "SPY", initDate = initdate, currency = "USD")
# Initialize the account
initAcct(account.st, portfolios = portfolio.st, initDate = initdate, currency = "USD", initEq = initeq)
# Initialize the orders
initOrders( portfolio.st, initDate = initdate)
# Store the strategy
strategy( strategy.st, store = TRUE)
.blotter <- new.env()
.strategy <- new.env()
# by HH: remove antes de criar de novo. Se não mudar para
rm.strat(portfolio.st) # para evitar o erro: "Portfolio firststrat already exists, use updatePortf() or addPortfInstr() to update it."
rm.strat(account.st) # para evitar o erro: "Account firststrat already exists, use updateAcct() or create a new account."
# Initialize the portfolio
initPortf(portfolio.st, symbols = "SPY", initDate = initdate, currency = "USD")
# Initialize the account
initAcct(account.st, portfolios = portfolio.st, initDate = initdate, currency = "USD", initEq = initeq)
# Initialize the orders
initOrders( portfolio.st, initDate = initdate)
# Store the strategy
strategy( strategy.st, store = TRUE)
# Create a 200-day SMA
spy_sma <- SMA(x = Cl(SPY), n = 200)
# Create an RSI with a 3-day lookback period
spy_rsi <- RSI(price = Cl(SPY), n = 3)
plot( Cl(SPY))
# Overlay a 200-day SMA
lines( SMA( Cl(SPY), n = 200), col = "red")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
Print( test_subset)
print( test_subset)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
install.packages("IKTrading")
source("IKTrading-extract.r")
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
add_TA
sma50 <- SMA(x = Cl(SPY), n = 50)
# Compute the SMA200
sma200 <- SMA(x = Cl(SPY), n = 200)
# Compute the DVO_2_126 with an navg of 2 and a percentlookback of 126
dvo <- DVO(HLC = HLC(SPY), navg = 2, percentlookback = 126)
# Recreate the chart.Posn of the strategy from the previous exercise
chart.Posn(Portfolio = portfolio.st, Symbol = "SPY")
# Overlay the SMA50 on your plot as a blue line
add_TA(sma50, on = 1, col = "blue")
# Overlay the SMA200 on your plot as a red line
add_TA(sma200, on = 1, col = "red")
# Add the DVO_2_126 to the plot in a new window
add_TA(dvo)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/01-aula.r', encoding = 'UTF-8')
instrets <- PortfReturns(portfolio.st)
# Compute Sharpe ratio from returns
print( SharpeRatio.annualized(instrets, geometric = FALSE))
require("PerformanceAnalytics")
library("quantmod")
# pegar os dados de pepsi e coca-cola entre January 2003 until the end of August 2016
from <- "2003-01-01"
to <- "2016-08-31"
ko <- getSymbols( Symbols = "ko", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
pep <- getSymbols( Symbols = "pep", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
head(ko)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r')
names(ko)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r')
# Make a time series plot of ko_pep
plot.zoo(ko_pep)
# Add as a reference, a horizontal line at 1
hh <- abline( h=1)
ko <- dailyReturn( ko$KO.Adjusted, type = "log")
ko <- getSymbols( Symbols = "ko", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
ko <- dailyReturn( ko$KO.Adjusted, type = "log")
head(ko)
ko1 <- getSymbols( Symbols = "ko", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
head(dailyReturn( ko1$KO.Adjusted))
ko <- dailyReturn( ko1$KO.Adjusted))
ko <- dailyReturn( ko1$KO.Adjusted)
ko <-ko+1
head(ko)
ko <- dailyReturn( ko1$KO.Adjusted, type = "log")+1
head(ko)
ko <- dailyReturn( ko1$KO.Close, type = "log")+1
head(ko)
ko <- dailyReturn( ko1$KO.Close)+1
head(ko)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
pep <- dailyReturn( pep1$PEP.Close, type = "log") + 1
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
install.packages(c("callr", "cli", "clipr", "furrr", "globals", "ps", "readr", "rlang", "tibble", "timetk"))
install.packages("rlang")
# Define the vector values
values <- c(4000, 4000, 2000)
values
sum(values)
# Define the vector weights
weights <- values/ sum(values)
# Print the resulting weights
print(weights)
marketcaps <- c( 5, 8, 9, 20, 25, 100, 100, 500, 700, 2000)
# Compute the weights
weights <- marketcaps / sum(marketcaps)
# Inspect summary statistics
print( weights)
# Create a bar plot of weights
barplot( weights)
# Inspect summary statistics
summary( weights)
install.packages(c("callr", "cpp11", "DT"))
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
plot.zoo(ko_pep)
# Add as a reference, a horizontal line at 1
hh <- abline( h=1, col="Red")
print(hh)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
# Vector of initial value of the assets
in_values <- c(1000, 5000, 2000)
# Vector of final values of the assets
fin_values <- c(1100, 4500,3000)
# Weights as the proportion of total value invested in each asset
weights <- in_values/sum(in_values)
# Vector of simple returns of the assets
returns <- (fin_values - in_values)/in_values
# Compute portfolio return using the portfolio return formula
preturns <- sum( returns * weights)
returns
preturns
weights
# resposta by HH
Print( 1000*(1+0.1)*(1-0.05))
# resposta by HH
print( 1000*(1+0.1)*(1-0.05))
# resposta by HH
# 100%
print( (1+1)*(1-0.5) )
from <- "2006-01-01"
to <- "2016-08-31"
apple <- getSymbols( Symbols = "aapl", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
msft <- getSymbols( Symbols = "msft", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
head(apple)
head(msft)
head(Cl(apple)*28)
prices <- merge( Cl(apple)*(7*4), Cl(msft))
names(prices) <- c( "AAPL", "MSFT")
head(prices)
tail(prices)
sub("\\.Close$", "", colnames(Cl(apple)))
colnames(Cl(apple))
?adjustOHLC
hh<-adjustOHLC(apple, adjust="split", symbol.name = "AAPL")
head(hh)
head(apple)
getSymbols("AAPL", from="1990-01-01", src="yahoo")
head(AAPL)
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
head(cbind(OpCl(AAPL),OpCl(AAPL.a),OpCl(AAPL.uA)))
head(cbind(ClCl(AAPL),ClCl(AAPL.a),ClCl(AAPL.uA)))
rm(AAPL)
rm(AAPL.a)
rm(AAPL.ua)
rm(AAPL.uA)
rr(hh)
rm(hh)
install.packages(c("foreach", "iterators"))
head(prices,6)
tail(prices,6)
from
to
hh <- apple[paste0(from,":2014-06-09")]
head(hh)
paste0(from,":2014-06-09")
hh <- apple["/2014-06-09"]
tail(hh)
hh <- Cl(apple["/2014-06-09"])
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
hh <- Cl(apple["/2014-06-09"])
tail(hh)
apple <- Cl(apple)
names(apple) <- "AAPL"
head(apple)
apple <- apple["/2014-06-06"]*4
apple["2014-06"]
tail(apple)
hh1 <- Cl(apple["/2020-08-30"]) * 4
names(hh1) <- "AAPL"
apple["2020-08"]
# junta os fechamentos na 'prices'
# ajuste no preço da Apple que teve 2 splits: em 09/06/2014, 7 para 1 e
# em 31/08/2020 4 para 1
hh1 <- Cl(apple) * 4
apple <- getSymbols( Symbols = "aapl", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
# junta os fechamentos na 'prices'
# ajuste no preço da Apple que teve 2 splits: em 09/06/2014, 7 para 1 e
# em 31/08/2020 4 para 1
hh1 <- Cl(apple) * 4
names(hh1) <- "AAPL"
hh1["2014-06"]
tail(hh1)
(x <- xts(4:10, Sys.Date()+4:10))
(y <- xts(1:6, Sys.Date()+1:6))
merge(x,y)
merge(x,y, join='inner')
merge(x,y, join='left')
(x <- xts(1:10, Sys.Date()+1:10))
merge(x,x)
rbind(x,x)
rbind(x[1:5],x[6:10])
# junta os fechamentos na 'prices'
# ajuste no preço da Apple que teve 2 splits: em 09/06/2014, 7 para 1 e
# em 31/08/2020 4 para 1
hh1 <- Cl(apple) * 4
names(hh1) <- "AAPL"
apple <-  hh1["/2014-06-06"] * 7
apple["2014-06"]
hh1["2014-06"]
apple <- rbind(apple, hh1["2014-06-09/"])
apple["2014-06"]
tail(apple)
head(apple)
head(returns <- Return.calculate(prices))
head(returns <- returns[-1, ])
plot(returns)
plot(returns[2014])
plot(returns["2014"])
plot(returns["2014-6"])
plot(prices["2014-6"])
prices["2014-6"]
hh1 <- Cl(apple) * 4
names(hh1) <- "AAPL"
apple <-  hh1["/2014-06-06"] * 7
apple <- rbind(apple, hh1["2014-06-09/"])
apple["2014-06"]
prices <- merge( apple, Cl(msft))
names(prices) <- c( "AAPL", "MSFT")
prices["2014-6"]
# Create the variable returns using Return.calculate()
returns <- Return.calculate(prices)
# Remove the first row of returns
returns <- returns[-1, ]
plot(returns)
# Create the weights
eq_weights <- c(0.5, 0.5)
# Create a portfolio using buy and hold
pf_bh <- Return.portfolio(R = returns, weights = eq_weights)
# Create a portfolio rebalancing monthly
pf_rebal <- Return.portfolio(R = returns, weights = eq_weights, rebalance_on = "months")
par(mfrow = c(2, 1), mar = c(2, 4, 2, 2))
plot.zoo(pf_bh)
plot.zoo(pf_rebal)
eq_weights <- c(0.5, 0.5)
# Create a portfolio using buy and hold
pf_bh <- Return.portfolio(returns, weights = eq_weights, verbose = TRUE)
# Create a portfolio that rebalances monthly
pf_rebal <- Return.portfolio(returns, weights = eq_weights, rebalance_on = "months", verbose = TRUE)
# Create eop_weight_bh
eop_weight_bh <- pf_bh$EOP.Weight
# Create eop_weight_rebal
eop_weight_rebal <- pf_rebal$EOP.Weight
# Plot end of period weights
par(mfrow = c(2, 1), mar=c(2, 4, 2, 2))
plot.zoo(eop_weight_bh$AAPL)
plot.zoo(eop_weight_rebal$AAPL)
from <- "1986-01-01"
to <- "2016-09-01"
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
head(sp500)
tail(sp500)
to <- "2016-08-01"
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
tail(sp500)
to <- "2016-09-01"
sp500 <- to.monthly(sp500)
head(sp500)
from <- "1985-12-30"
to <- "2016-09-02"
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500 <- to.monthly(sp500)
head(sp500)
sp500 <- to.monthly(Cl(sp500))
head(sp500)
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500 <- to.monthly(Cl(sp500))
head(sp500)
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500 <- Cl(sp500)
head(sp500)
sp500 <- to.monthly(sp500)
head(sp500)
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500 <- to.monthly(sp500)
head(sp500)
tail(sp500)
tail(Ad(sp500)
)
sp500 <- Ad(to.monthly(sp500))
head(sp500)
2-30"
to <- "2016-08-31"
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500 <- Ad(to.monthly(sp500))
sp500 <- getSymbols( Symbols = "^GSPC", src = "yahoo", index.class = "POSIXct",
from = from, to = to, adjust = TRUE, auto.assign = FALSE )
sp500_monthly <- to.monthly(sp500)
# Print the first six rows of sp500_monthly
head(sp500_monthly,6)
# Create sp500_returns using Return.calculate using the closing prices
sp500_returns <- Return.calculate( Cl( sp500_monthly))
# Time series plot
plot.zoo(sp500_returns)
# Produce the year x month table
table.CalendarReturns(sp500_returns)
#sp500 <- Ad(to.monthly(sp500))
par(las = 0)  # reset to default chart
# Time series plot
plot.zoo(sp500_returns)
par(mfrow = c(1, 1), mar=c(5, 4, 4, 2) + 0.1)
# Time series plot
plot.zoo(sp500_returns)
sp500_monthly <- to.monthly(sp500)
# Print the first six rows of sp500_monthly
head(sp500_monthly,6)
# Create sp500_returns using Return.calculate using the closing prices
sp500_returns <- Return.calculate( Cl( sp500_monthly))
# Time series plot
plot.zoo(sp500_returns)
# Produce the year x month table
table.CalendarReturns(sp500_returns)
head(sp500_monthly)
head(sp500_monthly[,4])
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
# Time series plot
print(plot.zoo(sp500_returns))
par(mfrow = c(2, 1), mar=c(2, 4, 2, 2))
print(plot.zoo(eop_weight_bh$AAPL))
print(plot.zoo(eop_weight_rebal$AAPL))
hh <- par(mfrow = c(2, 1), mar = c(2, 4, 2, 2))
hh <- plot.zoo(pf_bh)
hh <- plot.zoo(pf_rebal)
print(hh)
eq_weights <- c(0.5, 0.5)
# Create a portfolio using buy and hold
pf_bh <- Return.portfolio(R = returns, weights = eq_weights)
# Create a portfolio rebalancing monthly
pf_rebal <- Return.portfolio(R = returns, weights = eq_weights, rebalance_on = "months")
# Plot the time-series
hh <- par(mfrow = c(2, 1), mar = c(2, 4, 2, 2))
hh <- plot.zoo(pf_bh)
hh <- plot.zoo(pf_rebal)
print(hh)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
head(sp500_returns)
# ajuste by HH
sp500_returns <- sp500_returns[-1, ]
head(sp500_returns)
print( mean(sp500_returns))
# Compute the geometric mean of monthly returns
print( mean.geometric(sp500_returns))
# Compute the standard deviation
print( sd(sp500_returns))
install.packages(c("backports", "broom", "data.table", "digest", "doParallel", "furrr", "generics", "labeling", "modeldata", "openxlsx", "R6", "RcppArmadillo", "recipes", "rmarkdown", "SQUAREM", "testthat", "tidyquant", "timetk", "tinytex", "warp", "xfun"))
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Financial Trading in R - DataCamp/02-aula.r', encoding = 'UTF-8')
head(sp500_returns)
rep(2,4)
nrow(sp500_returns)
rf <- sp500_returns
hh <- rep(0.003, nrow(sp500_returns))
rf <- merge(rf, matrix( hh, ncol=1))
head(rf)
tail(rf)
rf <- sp500_returns
hh <- rep(0.003, nrow(sp500_returns))
rf <- merge(rf, matrix( hh, ncol=1, dimnames=list(NULL, NULL)))
rf$sp500.Close <-NULL
head(rf)
head(hh)
names(rf) <- NULL
head(hh)
head(rf)
annualized_rf <- (1 + rf)^12 - 1
# Plot the annualized risk-free rate
plot.zoo(annualized_rf)
head(annualized_rf)
annualized_rf <- (1 + rf)^12 - 1
# Plot the annualized risk-free rate
hh <- plot.zoo(annualized_rf)
# Compute the series of excess portfolio returns
sp500_excess <- sp500_returns - rf
# Compare the mean of sp500_excess and sp500_returns
mean(sp500_excess)
mean(sp500_returns)
# Compute the Sharpe ratio
sp500_sharpe <- mean(sp500_excess) / StdDev(sp500_returns)
plot.zoo(sp500_sharpe)
plot(sp500_sharpe)
sp500_sharpe
install.packages(c("backports", "broom", "cli", "colorspace", "cpp11", "dbplyr", "digest", "isoband", "labeling", "magrittr", "pillar", "processx", "ps", "R6", "rlang", "rmarkdown", "rstudioapi", "testthat", "tinytex", "vctrs", "xfun"))
