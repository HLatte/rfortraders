Win.Percent = Percent.Positive,
Loss.Percent = Percent.Negative,
WL.Ratio = Percent.Positive/Percent.Negative) %>%
select(Trades, Win.Percent, Loss.Percent, WL.Ratio)
load_package(verbose, "dplyr")
#
### 12.3.1 - Trade Related ####
#
tab.trades <- tstats %>%
mutate(Trades = Num.Trades,
Win.Percent = Percent.Positive,
Loss.Percent = Percent.Negative,
WL.Ratio = Percent.Positive/Percent.Negative) %>%
select(Trades, Win.Percent, Loss.Percent, WL.Ratio)
kable(t(tab.trades))
# 12.3.4 Performance Summary
rets <- PortfReturns(Account = account.st)
rownames(rets) <- NULL
charts.PerformanceSummary(rets, colorset = bluefocus)
# 12.3.5 - Per Trade Statistics
for(symbol in symbols) {
pts <- perTradeStats(portfolio.st, Symbol = symbol)
kable(pts, booktabs = TRUE, caption = symbol)
}
kable(pts)
View(pts)
# 12.3.6 - Performance Statistics
rets <- PortfReturns(Account = account.st)
View(rets)
rets <- PortfReturns(Account = account.st)
tab.perf <- table.Arbitrary(rets,
metrics=c(
"Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
kable(tab.perf)
rets <- PortfReturns(Account = account.st)
tab.risk <- table.Arbitrary(rets,
metrics=c(
"StdDev.annualized",
"maxDrawdown",
"VaR",
"ES"),
metricsNames=c(
"Annualized StdDev",
"Max DrawDown",
"Value-at-Risk",
"Conditional VaR"))
kable(tab.risk)
rm.strat("buyHold")
# initialize portfolio and account
initPortf("buyHold", "SPY", initDate = init_date)
initAcct("buyHold", portfolios = "buyHold",
initDate = init_date, initEq = init_equity)
# place an entry order
CurrentDate <- time(getTxns(Portfolio = portfolio.st, Symbol = "SPY"))[2]
equity = getEndEq("buyHold", CurrentDate)
ClosePrice <- as.numeric(Cl(SPY[CurrentDate,]))
UnitSize = as.numeric(trunc(equity/ClosePrice))
addTxn("buyHold", Symbol = "SPY", TxnDate = CurrentDate, TxnPrice = ClosePrice,
TxnQty = UnitSize, TxnFees = 0)
# place an exit order
LastDate <- last(time(SPY))
LastPrice <- as.numeric(Cl(SPY[LastDate,]))
addTxn("buyHold", Symbol = "SPY", TxnDate = LastDate, TxnPrice = LastPrice,
TxnQty = -UnitSize , TxnFees = 0)
# update portfolio and account
updatePortf(Portfolio = "buyHold")
updateAcct(name = "buyHold")
updateEndEq(Account = "buyHold")
chart.Posn("buyHold", Symbol = "SPY")
rets <- PortfReturns(Account = account.st)
rets.bh <- PortfReturns(Account = "buyHold")
returns <- cbind(rets, rets.bh)
charts.PerformanceSummary(returns, geometric = FALSE, wealth.index = TRUE,
main = "Strategy vs. Market")
# 12.3.10 Risk/Return Scatterplot
chart.RiskReturnScatter(returns, Rf = 0, add.sharpe = c(1, 2),
main = "Return vs. Risk", colorset = c("red", "blue"))
# 12.3.10 Risk/Return Scatterplot
chart.RiskReturnScatter(returns, Rf = 0, add.sharpe = c(1, 2),
main = "Return vs. Risk",
colorset = c("red", "red", "red", "blue"))
# 12.3.11 Relative Performance
for(n in 1:(ncol(returns) - 1)) {
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = c("red", "blue"), lwd = 2,
legend.loc = "topleft")
}
for(n in 1:(ncol(returns) - 1)) {
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = c("red", "blue"), lwd = 2,
legend.loc = "topleft")
}
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = c("red", "blue"), lwd = 2,
legend.loc = "topleft")
ncol(returns)
head(returns)
head(returns[,1])
n
for(n in 1:(ncol(returns) - 1)) {
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = rich8equal, lwd = 2,
legend.loc = "topleft")
}
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = rich8equal, lwd = 2,
legend.loc = "topleft")
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = "blue", lwd = 2,
legend.loc = "topleft")
n=1
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = "blue", lwd = 2,
legend.loc = "topleft")
n<-2
chart.RelativePerformance(returns[, n], returns[, ncol(returns)],
colorset = "blue", lwd = 2,
legend.loc = "topleft")
pf <- getPortfolio(portfolio.st)
xyplot(pf$summary, type = "h", col = 4)
# carrega os pacotes necessarios
load_package(verbose, "lattice")
pf <- getPortfolio(portfolio.st)
xyplot(pf$summary, type = "h", col = 4)
for(symbol in symbols) {
chart.ME(Portfolio = portfolio.st, Symbol = symbol, type = "MAE",
scale = "percent")
}
for(symbol in symbols) {
chart.ME(Portfolio = portfolio.st, Symbol = symbol, type = "MFE",
scale = "percent")
}
account <- getAccount(account.st)
xyplot(account$summary, type = "h", col = 4)
equity <- a$summary$End.Eq
plot(equity, main = "Equity Curve")
equity <- account$summary$End.Eq
plot(equity, main = "Equity Curve")
ret <- Return.calculate(equity, method = "log")
charts.PerformanceSummary(ret, colorset = bluefocus,
main = "Strategy Performance")
rets <- PortfReturns(Account = account.st)
chart.CumReturns(rets, colorset = rich10equal, legend.loc = "topleft",
main="SPDR Cumulative Returns")
# 12.4.4 Distribution Analysis
chart.Boxplot(rets, main = "SPDR Returns", colorset= rich10equal)
# 12.4.5 Annualized Returns
print(ar.tab <- table.AnnualizedReturns(rets))
max.risk <- max(ar.tab["Annualized Std Dev",])
max.return <- max(ar.tab["Annualized Return",])
chart.RiskReturnScatter(rets,
main = "SPDR Performance", colorset = rich10equal,
xlim = c(0, max.risk * 1.1), ylim = c(0, max.return))
#quantstratII pp. 67/69
mnc <- pts$Max.Notional.Cost
pe <- sapply(pts$Start,getEndEq, Account = account.st)/3
barplot(rbind(pe,mnc),beside=T,col=c(2,4),names.arg=format(pts$Start,"%m/%d/%y"),
ylim=c(0,1.5e5),ylab="$",xlab="Trade Date")
legend(x="topleft",legend=c("(Portfolio Equity)/9","Order Size"),
pch=15,col=c(2,4),bty="n")
title("Percent of Portfolio Equity versus Trade Size for XLU")
install.packages(c("backports", "DT", "ggplot2", "gower", "htmltools", "isoband", "jsonlite", "knitr", "openssl", "recipes", "rmarkdown", "roxygen2", "shiny", "tinytex", "xfun"))
install.packages(c("backports", "openssl", "roxygen2"))
install.packages("htmltools")
install.packages("copula")
install.packages("scatterplot3d")
install.packages("ggplot2")
# Copula package
library(copula)
install.packages(c("fs", "processx", "Rcpp", "tidyquant", "timetk"))
# Copula package
library(copula)
# Fancy 3D plain scatterplots
library(scatterplot3d)
# ggplot2
library(ggplot2)
# Useful package to set ggplot plots one next to the other
library(grid)
set.seed(235)
# Generate a bivariate normal copula with rho = 0.7
normal <- normalCopula(param = 0.7, dim = 2)
View(normal)
# Generate a bivariate t-copula with rho = 0.8 and df = 2
stc <- tCopula(param = 0.8, dim = 2, df = 2)
nk <- frankCopula(dim = 2, param = 8)
gumbel <- gumbelCopula(dim = 3, param = 5.6)
clayton <- claytonCopula(dim = 4, param = 19)
# Print information on the Frank copula
print(frank)
# Build a Frank, a Gumbel and a Clayton copula
frank <- frankCopula(dim = 2, param = 8)
# Print information on the Frank copula
print(frank)
# Select the copula
cp <- claytonCopula(param = c(3.4), dim = 2)
# Generate the multivariate distribution (in this case it is just bivariate) with normal and t marginals
multivariate_dist <- mvdc(copula = cp,
margins = c("norm", "t"),
paramMargins = list(list(mean = 2, sd=3),
list(df = 2)) )
print(multivariate_dist)
coef_ <- 0.8
mycopula <- normalCopula(coef_, dim = 2)
u <- rCopula(2000, mycopula)
# Compute the density
pdf_ <- dCopula(u, mycopula)
# Compute the CDF
cdf <- pCopula(u, mycopula)
# Generate random sample observations from the multivariate distribution
v <- rMvdc(2000, multivariate_dist)
# Compute the density
pdf_mvd <- dMvdc(v, multivariate_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, multivariate_dist)
View(u)
head (pdf_)
head (cdf_)
head (cdf)
norm.cop <- normalCopula(0.5)norm.cop
norm.cop <- normalCopula(0.5)
norm.cop
dCopula(c(0.5, 0.5), norm.cop)
pCopula(c(0.5, 0.5), norm.cop)
dCopula(c(0.95, 0.95), norm.cop)
install.packages(c("anytime", "broom", "data.table", "devtools", "future", "gamlss", "gamlss.dist", "httr", "pillar", "pkgbuild", "RcppArmadillo", "remotes", "riingo", "rlang", "slider", "sys", "tibble", "timetk", "tinytex", "vctrs", "xfun"))
install.packages(c("dplyr", "DT", "fs", "ps", "rvest", "tidyr", "TTR", "zip"))
install.packages("TTR")
install.packages("TTR")
library(TTR)
detach("package:TTR", unload = TRUE)
install.packages("TTR")
install.packages("TTR")
install.packages("TTR")
options(digits = 15)
pi
options(digits = 1)
pi
options(digits = 4)
pi
geterrmessage()
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Utils-geral.r')
install.packages(c("anytime", "backports", "dplyr", "glue", "jsonlite", "processx", "R.methodsS3", "R.oo", "R.utils", "RcppArmadillo", "SQUAREM", "tidyr", "timetk", "TTR", "vctrs", "zip"))
install.packages("TTR")
install.packages("TTR")
install.packages("TTR")
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Hidden Markov Models for Regime Detection.r')
rep(1:4, 2)
head(true_regimes,20)
true_regimes
returns
days
# Create and fit the Hidden Markov Model
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
layout(1:2)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Bull','Bear'), fill=1:2, bty='n')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Hidden Markov Models for Regime Detection - parte 2.r')
plot(gspcRets)
layout(1:1)
plot(gspcRets)
par(no.readonly = TRUE)
tail(returns)
tail(gspcRets)
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2'), fill=1:2, bty='n')
# Fit a Hidden Markov Model with THREE states
# to the S&P500 returns stream
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 3, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
# Plot the returns stream and the posterior
# probabilities of the separate regimes
layout(1:2)
plot(returns, type='l', main='Regime Detection', xlab='', ylab='Returns')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
getwd()
# by HH
EURUSD1d <- read.csv("EURUSD1d.csv")
head(EURUSD1d[,1])
ibrary("depmixS4") #the HMM library we'll use
#install.packages("quantmod")
library("quantmod") #a great library for technical analysis and working with time series
# by HH
EURUSD1d <- read.csv("EURUSD1d.csv")
# Load out data set, then turn it into a time series object.
Date<-as.character(EURUSD1d[,1])
DateTS<- as.POSIXlt(Date, format = "%Y.%m.%d %H:%M:%S") #create date and time objects
View(DateTS)
View(DateTS)
TSData<-data.frame(EURUSD1d[,2:5],row.names=DateTS)
head(DateTS)
head(TSData)
head(EURUSD1d)
TSData<-as.xts(TSData) #build our time series data set
ATRindicator<-ATR(TSData[,2:4],n=14) #calculate the indicator
ATR<-ATRindicator[,2] #grab just the ATR
ModelData <- data.frame(LogReturns,ATR) #create the data frame for our HMM model
ModelData <- ModelData[-c(1:14),] #remove the data where the indicators are being calculated
colnames(ModelData)<-c("LogReturns","ATR") #name our columns
# Build the model
set.seed(1)
# We’re setting the LogReturns and ATR as our response variables, using the data
#frame we just built, want to set 3 different regimes, and setting the response
#distributions to be gaussian.
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,
family=list(gaussian(),gaussian()))
#install.packages("depmixS4")
library("depmixS4") #the HMM library we'll use
#install.packages("quantmod")
library("quantmod") #a great library for technical analysis and working with time series
# We’re setting the LogReturns and ATR as our response variables, using the data
#frame we just built, want to set 3 different regimes, and setting the response
#distributions to be gaussian.
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,
family=list(gaussian(),gaussian()))
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,
family=list(gaussian(),gaussian()))
ModelData <- data.frame(LogReturns,ATR) #create the data frame for our HMM model
ModelData <- ModelData[-c(1:14),] #remove the data where the indicators are being calculated
colnames(ModelData)<-c("LogReturns","ATR") #name our columns
# Build the model
set.seed(1)
# We’re setting the LogReturns and ATR as our response variables, using the data
#frame we just built, want to set 3 different regimes, and setting the response
#distributions to be gaussian.
HMM<-depmix(list(LogReturns~1,ATR~1),data=ModelData,nstates=3,
family=list(gaussian(),gaussian()))
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Identifying Changing Market Conditions-HMM.r', encoding = 'UTF-8')
head(TSData)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Identifying Changing Market Conditions-HMM.r', encoding = 'UTF-8')
HMMfit<-fit(HMM, verbose = FALSE) #fit our model to the data set
#we can compare the log Likelihood as well as the AIC and BIC values to help choose our model
print(HMMfit)
summary(HMMfit)
#find the posterior odds for each state over our data set
HMMpost<-posterior(HMMfit)
# we can see that we now have the probability for each state for everyday as well
#as the highest probability class.
head(HMMpost)
HMMpost
head(HMMpost)
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
matplot(HMMpost[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1','Regime #2', 'Regime #3'), fill=1:3, bty='n')
head(HMMpost,2)
head(HMMpost[,2])
layout(1:3)
matplot(HMMpost[,2], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1'), fill=1, bty='n')
matplot(HMMpost[,3], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #2'), fill=1, bty='n')
matplot(HMMpost[,4], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #3'), fill=1, bty='n')
HMMpost$soma <- HMMpost[,2] + HMMpost[,3] + HMMpost[,4]
head(HMMpost)
layout(1)
matplot(HMMpost$soma, type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Soma do Regimes'), fill=1, bty='n')
?seq
library(xts)
d <- as.Date("2005-1-1") + seq(0,90,30)
next.month <- function(d) as.Date(as.yearmon(d) + 1/12) +
as.numeric(d - as.Date(as.yearmon(d)))
next.month(d)
d
yearmon(d)
as.yearmon(d)
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Identifying Changing Market Conditions-HMM.r', encoding = 'UTF-8')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
plot(HMMpost$state, type='s', main='Implied States', xlab='', ylab='State')
layout(1:3)
matplot(HMMpost[,2], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #1'), fill=1, bty='n')
matplot(HMMpost[,3], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #2'), fill=1, bty='n')
matplot(HMMpost[,4], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='bottomleft', c('Regime #3'), fill=1, bty='n')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Log Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
plot(HMMpost$state, type='s', main='', xlab='', ylab='Implied States')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Log Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
#plot(HMMpost$state, type='s', main='', xlab='', ylab='Implied States')
# Alternativa by HH
matplot(HMMpost$state, type='l', main='', ylab='Implied States')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Log Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
#plot(HMMpost$state, type='s', main='', xlab='', ylab='Implied States')
# Alternativa by HH
matplot(HMMpost$state, type='s', main='', ylab='Implied States')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Log Returns')
plot(ATR, type='l', main='', xlab='', ylab='ATR')
legend(x='bottomleft', c('ATR'), fill=1, bty='n')
plot(HMMpost$state, type='s', main='', xlab='', ylab='Implied States')
layout(1:3)
plot(LogReturns, type='l', main='Regime Detection', xlab='', ylab='Log Returns')
matplot(ATR, type='l', main='', xlab='', ylab='ATR')
legend(x='bottomleft', c('ATR'), fill=1, bty='n')
plot(HMMpost$state, type='s', main='', xlab='', ylab='Implied States')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Identifying Changing Market Conditions-HMM.r', encoding = 'UTF-8')
install.packages("callr")
library(curl)
if(!file.exists('../sit'))
curl_download('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', '../sit',mode = 'wb',quiet=T)
con = gzcon(file('../sit', 'rb'))
source(con)
close(con)
plota.test()
plota.test()
library(SIT)
file.exists('../sit')
list.files('../sit')
list.files('../')
devtools::install_github('systematicinvestor/SIT.date')
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Regime Detection Update.r', encoding = 'UTF-8')
probs = posterior(fm2)
print(head(probs))
layout(1:3)
plota(ret, type='h', col='blue')
plota.legend('S&P 500 Daily Log Returns', 'blue')
plota(atr, type='l', col='darkgreen')
plota.legend('Daily ATR(14)', 'darkgreen')
temp = NA * price
temp[index] = probs$state
plota(temp, type='l', col='darkred')
plota.legend('Market Regimes', 'darkred')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders - (Book- Quant trading with R)/Chapter_07/Regime Detection Update.r', encoding = 'UTF-8')
layout(1:4)
for(i in 2:5) {
temp = NA * price
temp[index] = probs[,i]
plota(temp, type='l', col=i)
plota.legend(paste('Market Regime', colnames(probs)[i]), i)
}
head(price)
ata.spy = getSymbols('SPY', auto.assign = FALSE)
# simple example candles and volume
y = data.spy['2011:01:01::2011:02:01']
highlight = which(Cl(y) < 127)
# plot
layout(c(1,1,2))
plota(y, type = 'candle', main = 'SPY', plotX = F, x.highlight = highlight)
y = plota.scale.volume(y)
plota(y, type = 'volume', x.highlight = highlight)
data.spy = getSymbols('SPY', auto.assign = FALSE)
# simple example candles and volume
y = data.spy['2011:01:01::2011:02:01']
highlight = which(Cl(y) < 127)
# plot
layout(c(1,1,2))
plota(y, type = 'candle', main = 'SPY', plotX = F, x.highlight = highlight)
y = plota.scale.volume(y)
plota(y, type = 'volume', x.highlight = highlight)
getAnywhere(to.period)
library(xts)
getAnywhere(to.period)
deparse(substitute(ar.tab))
substitute(ar.tab)
expression(a + b)
getAnywhere(toPeriod)
toPeriod
xts:::toPeriod
xts::toPeriod
getAnywhere(.Call)
.Call
download.packages(pkgs = "xts",
destdir = ".",
type = "source")
load_package(verbose, "quantstrat")
load_package(verbose, "PerformanceAnalytics")
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Backtesting Strategies with R-ex do Livro-Stop Loss.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Backtesting Strategies with R-ex do Livro-Stop Loss.r', encoding = 'UTF-8')
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Utils-geral.r')
search_last_err_on_so()
rm(list = ls())
source('D:/HL/Dropbox (LaMaison)/Recherche geral/Treading/R for traders (Book-Quant trading with R)/Chapter_07/Backtesting Strategies with R-ex do Livro-Stop Loss.r', encoding = 'UTF-8')
devtools::install_github("braverock/blotter")
install.packages("devtools")
devtools::install_github("joshuaulrich/quantmod")
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/quantstrat")
devtools::install_github("braverock/PerformanceAnalytics")
