# {r setup, include = FALSE, cache=FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
cache = TRUE
)
require(beanplot)
require(gamlss)
require(gamlss.util)
require(quantstrat)
require(knitr)
require(pander)
panderOptions("digits", 2)
source('tiingoapi.R')
# this file contains only one line:
# setDefaults(getSymbols.tiingo, api.key='MYAPIKEY')
require(doParallel)
registerDoParallel()
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
knitr::include_graphics("hypothesis_process.png")
knitr::include_graphics("toolchain.png")
knitr::include_graphics("building_blocks.png")
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
initAcct(account.st,portfolios=portfolio.st,initEq = initEq)
initOrders(portfolio=portfolio.st)
strategy.st<-portfolio.st
# define the strategy
strategy(strategy.st, store=TRUE)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
# {r setup, include = FALSE, cache=FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
cache = TRUE
)
require(beanplot)
require(gamlss)
require(gamlss.util)
require(quantstrat)
require(knitr)
require(pander)
panderOptions("digits", 2)
source('tiingoapi.R')
# this file contains only one line:
# setDefaults(getSymbols.tiingo, api.key='MYAPIKEY')
require(doParallel)
registerDoParallel()
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
knitr::include_graphics("hypothesis_process.png")
knitr::include_graphics("toolchain.png")
knitr::include_graphics("building_blocks.png")
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
install.packages('devtools') # if you don't have it installed
install.packages('PerformanceAnalytics')
install.packages('FinancialInstrument')
devtools::install_github('braverock/blotter')
devtools::install_github('braverock/quantstrat')
install.packages("PerformanceAnalytics")
install.packages("FinancialInstrument")
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
# {r setup, include = FALSE, cache=FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
cache = TRUE
)
require(beanplot)
require(gamlss)
require(gamlss.util)
require(quantstrat)
require(knitr)
require(pander)
panderOptions("digits", 2)
source('tiingoapi.R')
# this file contains only one line:
# setDefaults(getSymbols.tiingo, api.key='MYAPIKEY')
require(doParallel)
registerDoParallel()
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
knitr::include_graphics("hypothesis_process.png")
knitr::include_graphics("toolchain.png")
knitr::include_graphics("building_blocks.png")
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
initPortf(portfolio.st,symbols=stock.str)
# Do some house cleaning by HH
rm(list = ls(.blotter), envir = .blotter)
rm( portfolio.st)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
rm.strat(portfolio.st) #by HH
rm.strat(account.st) #by HH
initPortf(portfolio.st,symbols=stock.str)
initAcct(account.st,portfolios=portfolio.st,initEq = initEq)
initOrders(portfolio=portfolio.st)
strategy.st<-portfolio.st
rm.strat(strategy.st) #by HH
# define the strategy
strategy(strategy.st, store=TRUE)
# Do some house cleaning by HH
rm(list = ls(.blotter), envir = .blotter)
rm( portfolio.st)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
rm.strat(portfolio.st) #by HH
rm.strat(account.st) #by HH
initPortf(portfolio.st,symbols=stock.str)
initAcct(account.st,portfolios=portfolio.st,initEq = initEq)
initOrders(portfolio=portfolio.st)
strategy.st<-portfolio.st
rm.strat(strategy.st) #by HH
# define the strategy
strategy(strategy.st, store=TRUE)
# Do some house cleaning by HH
#rm(list = ls(.blotter), envir = .blotter)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
rm.strat(portfolio.st) #by HH
rm.strat(account.st) #by HH
initPortf(portfolio.st,symbols=stock.str)
initAcct(account.st,portfolios=portfolio.st,initEq = initEq)
initOrders(portfolio=portfolio.st)
strategy.st<-portfolio.st
rm.strat(strategy.st) #by HH
# define the strategy
strategy(strategy.st, store=TRUE)
# {r setup, include = FALSE, cache=FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = FALSE,
cache = TRUE
)
require(beanplot)
require(gamlss)
require(gamlss.util)
require(quantstrat)
require(knitr)
require(pander)
panderOptions("digits", 2)
source('tiingoapi.R')
# this file contains only one line:
# setDefaults(getSymbols.tiingo, api.key='MYAPIKEY')
require(doParallel)
registerDoParallel()
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
knitr::include_graphics("hypothesis_process.png")
knitr::include_graphics("toolchain.png")
knitr::include_graphics("building_blocks.png")
# Do some house cleaning by HH
#rm(list = ls(.blotter), envir = .blotter)
stock.str <- 'EEM'
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate = '2003-12-31'
initEq = 100000
portfolio.st = 'macd'
account.st = 'macd'
rm.strat(portfolio.st) #by HH
rm.strat(account.st) #by HH
initPortf(portfolio.st,symbols=stock.str)
initAcct(account.st,portfolios=portfolio.st,initEq = initEq)
initOrders(portfolio=portfolio.st)
strategy.st<-portfolio.st
rm.strat(strategy.st) #by HH
# define the strategy
strategy(strategy.st, store=TRUE)
## get data
getSymbols(stock.str,
from=startDate,
adjust=TRUE,
src='tiingo')
#MA parameters for MACD
fastMA = 12
slowMA = 26
signalMA = 9
maType="EMA"
#one indicator
add.indicator(strategy.st, name = "MACD",
arguments = list(x=quote(Cl(mktdata)),
nFast=fastMA,
nSlow=slowMA),
label='_'
)
#two signals
add.signal(strategy.st,
name="sigThreshold",
arguments = list(column="signal._",
relationship="gt",
threshold=0,
cross=TRUE),
label="signal.gt.zero"
)
add.signal(strategy.st,
name="sigThreshold",
arguments = list(column="signal._",
relationship="lt",
threshold=0,
cross=TRUE),
label="signal.lt.zero"
)
add.distribution(strategy.st,
paramset.label = 'signal_analysis',
component.type = 'indicator',
component.label = '_',
variable = list(n = fastMA),
label = 'nFAST'
)
add.distribution(strategy.st,
paramset.label = 'signal_analysis',
component.type = 'indicator',
component.label = '_',
variable = list(n = slowMA),
label = 'nSLOW'
)
sa_buy <- apply.paramset.signal.analysis(
strategy.st,
paramset.label='signal_analysis',
portfolio.st=portfolio.st,
sigcol = 'signal.gt.zero',
sigval = 1,
on=NULL,
forward.days=50,
cum.sum=TRUE,
include.day.of.signal=FALSE,
obj.fun=signal.obj.slope,
decreasing=TRUE,
verbose=TRUE)
